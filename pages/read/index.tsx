import type { NextPage } from 'next'
import { useRouter } from 'next/router'
import { useEffect, useRef, useState } from 'react'
import jsQR from 'jsqr'
import Head from 'next/head'
import { useReadContext } from '../../src/components/ReadContext'
import styles from '../../styles/Home.module.css'

const generateByJsQr = (image: ImageData, width: number, height: number) => {
  const code = jsQR(image.data, width, height)
  if (!code) {
    return null
  }
  return code.data
}

const generateByBarcodeDetection = async (video: HTMLVideoElement) => {
  const formats = await window.BarcodeDetector.getSupportedFormats();

  if(!formats.includes('qr_code')) {
    throw new Error('QRコードがサポートされていません…');
  }
  const detector = new window.BarcodeDetector({
    formats: ['qr_code']
  });
  const codes = await detector.detect(video)
  if (!codes || codes.length === 0) {
    return null
  }
  return codes[0].rawValue
}
const Read: NextPage = () => {
  const router = useRouter()
  const { updateResult } = useReadContext()
  const videoRef =  useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [stream, setStream] = useState<MediaStream | null>(null)
  const [libType, setLibType] = useState('jsQr')
  const onClick = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia(
        {
          audio: false,
          video: { facingMode: 'environment' }
        }
      )
      setStream(stream)
      const video = videoRef.current
      if (!video) return
      video.srcObject = stream
      video.onloadedmetadata = () => {
        video.play()
        checkQr()
      }
    } catch (e) {
      console.log('=== ERROR', e)
    }
  }
  const checkQr = async () => {
    const canvas = canvasRef.current
    const video = videoRef.current
    if (!canvas || !video) return
    const ctx = canvas.getContext('2d')
    canvas.height = video.videoHeight
    canvas.width = video.videoWidth
    ctx?.drawImage(video, 0, 0, canvas.width, canvas.height)
    const imageData = ctx?.getImageData(0, 0, canvas.width, canvas.height)
    if (!imageData) return
    const code = libType === 'jsQr'
      ? generateByJsQr(imageData, canvas.width, canvas.height)
      : await generateByBarcodeDetection(video)

    if (code) {
      updateResult(code)
      router.push('/result')
    } else {
      setTimeout( () => {
        checkQr()
      }, 1000)
    }
  }
  useEffect(() => {
    return () => {
      stream?.getVideoTracks().forEach(t => t.stop())
    }
  }, [stream])
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1 className={styles.title}>
          QR
        </h1>
        <label>
          jsQR
          <input type='radio' name='type' value='jsQr' checked={libType === 'jsQr'} onChange={e => setLibType(e.target.value)} />
        </label>
        <label>
          Barcode Detection
          <input type='radio' name='type' value='barcodeDetection' checked={libType === 'barcodeDetection'} onChange={e => setLibType(e.target.value)} />
        </label>
        <button onClick={() => onClick()}>カメラを起動</button>
        <video className={styles.video}  ref={videoRef}></video>
        <canvas className={styles.canvas} ref={canvasRef} />
      </main>
    </div>
  )
}

export default Read
